import taipy as tp
from taipy import Config, Core, Gui
import pandas as pd
from utils import load_krp_file, get_laps


################################################################
#            Configure application                             #
################################################################
def load_telemetry_file(name):
    print("xxx")
    return f"Hello {name}!"


# A first data node configuration to model an input name.
fname_data_node_cfg = Config.configure_data_node(id="fname")
# A second data node configuration to model the message to display.
df_head_data_node_cfg = Config.configure_data_node(id="df_head")
# A task configuration to model the build_message function.
build_telemetry_task_cfg = Config.configure_task("load_telemetry_file", load_telemetry_file, fname_data_node_cfg, df_head_data_node_cfg)
# The scenario configuration represents the whole execution graph.
scenario_cfg = Config.configure_scenario("scenario", task_configs=[build_telemetry_task_cfg])

################################################################
#            Design graphical interface                        #
################################################################

#fname = None
#df_head = None

fname = "Logdata Essay mini60 2023-10-31.csv"
df_head, df_units, df, laptimes = load_krp_file(fname)
laps = get_laps(df)
selected_laps = pd.Series(True, index=laps)
df_disp = df.copy()
df_disp.index = (df_disp.index - pd.to_datetime(0)).total_seconds()

def load_telemetry_file_scenario(state):
    fname = state.fname
    df_head, df_units, df, laptimes = load_krp_file(fname)
    state.scenario.df_head.write(df_head)
    state.scenario.submit()
    state.df_head = scenario.df_head.read()


head = """
<|{fname}|file_selector|label=Open Kart Racing Pro Telemetry File|on_action=load_telemetry_file_scenario|extensions=.csv|drop_message=Drop Message|>

<|navbar|>
"""

page_data = """
<|layout|columns=40% 30% 30%|

<|{df_head.reset_index()}|table|page_size=5|>

<|{laptimes.reset_index()}|table|page_size=5|>

<|{df_units.reset_index()}|table|page_size=5|>

|>


<|{df_disp.reset_index()}|table|>
"""


def lap_button_pressed(state, id):
    # React to the button press action
    print(state, id)


def build_laps_buttons(selected_laps):
    buttons = ""
    for i, (lap, selected) in enumerate(selected_laps.items()):
        if i != 0:
            buttons += " "
        if selected:
            class_name = "plain"
        else:
            class_name = ""
        buttons += f"<|{lap}|button|on_action=lap_button_pressed|id={lap}|class_name={class_name}|>"
    return buttons

page_analyse = """
<|layout|columns=40% 30% 30%|

<|{df_head.reset_index()}|table|page_size=5|>

<|{laptimes.reset_index()}|table|page_size=5|>

<|{df_units.reset_index()}|table|page_size=5|>

|>
"""

buttons = build_laps_buttons(selected_laps)
page_analyse += f"Laps: {buttons}"

page_analyse += """
<|layout|columns=70% 30%|
<|{df}|chart|mode=line|x=Distance|y=Engine|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=CylHeadTemp|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=WaterTemp|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=Gear|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=Speed|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=LatAcc|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=LonAcc|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=Steer|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=Throttle|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=Brake|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=FrontBrakes|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=Clutch|color=Lap|>
<|{df}|chart|mode=line|x=Distance|y=YawVel|color=Lap|>

<|{df}|chart|mode=scatter|x=PosX|y=PosY|>

|>
"""

page_laps = """
<|layout|columns=60% 40%|

<|{laptimes.reset_index()}|table|page_size=20|>

<|{df_head.reset_index()}|table|page_size=20|>

|>

"""

page_about = """
# Kart Racing Pro Telemetry analyser

Analyse the telemetry data generated by the karting simulator [Kart Racing Pro](https://www.kartracing-pro.com/).

To run the program press select file and then select the file created by Kart Racing Pro.

The tabs are:

 * **About** information of the tool
 * **Data** to view table data of speed, throttle, break, steer etc
 * **Analyse** to view graphs of speed, throttle, break, steer etc
 * **Laps** to show only lap times

All graphs including the track map is zoomable.

Feel free to watch code at [https://github.com/scls19fr/krp_python_telemetry](https://github.com/scls19fr/krp_python_telemetry)
"""

pages = {
    "/": head,
    "about": page_about,
    "data": page_data,
    "analyse": page_analyse,
    "laps": page_laps,
}

if __name__ == "__main__":
    # Instantiate and run Core service
    Core().run()
    # Manage scenarios and data nodes
    scenario = tp.create_scenario(scenario_cfg)
    # Instantiate and run Gui service
    gui = Gui(pages=pages)
    gui.run(dark_mode=False)
